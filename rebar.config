%% -*- mode: erlang;erlang-indent-level: 4;indent-tabs-mode: nil -*-
%% ex: ts=4 sw=4 ft=erlang et

{erl_opts, [debug_info]}.
{require_otp_vsn, "R14|R15"}.

%% == Core ==

%% Additional library directories to add to the code path
%% TODO use git and deps for this in future
{lib_dirs, ["deps/geos/lib"]}.

%% == Erlang Compiler ==

%% == Port Compiler ==

%% Port compilation environment variables. See rebar_port_compiler.erl for
%% more info. Default is `[]'
% rebar: {port_env, [{"CFLAGS", "$CFLAGS -Ifoo"},
%            {"freebsd", "LDFLAGS", "$LDFLAGS -lfoo"}]}.
%
%
% erlgeom: {port_envs, [
%    % Link the GEOS C binding
%    %{".*", "CFLAGS", "$CFLAGS -g -Wall"},
%    {".*", "LDFLAGS", "$LDFLAGS -lgeos_c"}
%]}.
{port_env, [
    {"unix", "DRV_LDFLAGS", "$LDFLAGS -lgeos_c"},
    %% add MS Visual C++ support to rebar on Windows
    {"win32", "CC", "cl.exe"},
    {"win32", "CXX", "cl.exe"},
    {"win32", "LINKER", "link.exe"},
    %% DRV_* and EXE_* Templates are identical
    {"win32", "DRV_CXX_TEMPLATE",
     "$CXX /c $CXXFLAGS $DRV_CFLAGS $PORT_IN_FILES /Fo$PORT_OUT_FILE"},
    {"win32", "DRV_CC_TEMPLATE",
     "$CC /c $CFLAGS $DRV_CFLAGS $PORT_IN_FILES /Fo$PORT_OUT_FILE"},
    {"win32", "DRV_LINK_TEMPLATE",
     "$LINKER $PORT_IN_FILES $LDFLAGS $DRV_LDFLAGS /OUT:$PORT_OUT_FILE"},
    %% DRV_* and EXE_* Templates are identical
    {"win32", "EXE_CXX_TEMPLATE",
     "$CXX /c $CXXFLAGS $EXE_CFLAGS $PORT_IN_FILES /Fo$PORT_OUT_FILE"},
    {"win32", "EXE_CC_TEMPLATE",
     "$CC /c $CFLAGS $EXE_CFLAGS $PORT_IN_FILES /Fo$PORT_OUT_FILE"},
    {"win32", "EXE_LINK_TEMPLATE",
     "$LINKER $PORT_IN_FILES $LDFLAGS $EXE_LDFLAGS /OUT:$PORT_OUT_FILE"},
    %% ERL_CFLAGS are ok as -I even though strictly it should be /I
    {"win32", "ERL_LDFLAGS", " /LIBPATH:$ERL_EI_LIBDIR erl_interface.lib ei.lib"},
    {"win32", "DRV_CFLAGS", "/Zi /Wall $ERL_CFLAGS"},
    {"win32", "DRV_LDFLAGS", "/DLL $ERL_LDFLAGS"},
    %% geos-specific flags
    {"win32", "DRV_LDFLAGS", "$DRV_LDFLAGS /LIBPATH:deps/geos/lib geos_c.lib"},
    {"win32", "DRV_CFLAGS", "$DRV_CFLAGS /Ideps/geos/include"}
]}.

%% port_specs
%% List of filenames or wildcards to be compiled. May also contain a tuple
%% consisting of a regular expression to be applied against the system
%% architecture as a filter.
%{port_specs, [{"priv/so_name.so", ["c_src/*.c"]},
%              {"linux", "priv/hello_linux", ["c_src/hello_linux.c"]},
%              {"linux", "priv/hello_linux", ["c_src/*.c"], [{env, []}]}}.
% {port_sources, ["c_src/*.c"]}.
{port_specs, [
            {"unix", "priv/erlgeom.so", ["c_src/*.c"]},
            {"win32", "priv/erlgeom.dll", ["c_src/*.c"]}]}.
%
%%% == EUnit ==
%
%%% Options for eunit:test()
%{eunit_opts, []}.
%
%%% Additional compile options for eunit. erl_opts from above is also used
%{eunit_compile_opts, []}.
%
%%% Same as erl_first_files, but used only when running 'eunit'
%{eunit_first_files, []}.
%
%%% Whether to enable coverage reporting. Default is `false'
%{cover_enabled, false}.
%
%%% Whether to print coverage report to console. Default is `false'
%{cover_print_enabled, false}.
%
%%% == Common Test ==
%
%%% Override the default "test" directory in which SUITEs are located
%{ct_dir, "itest"}.
%
%%% Option to pass extra parameters when launching Common Test
%{ct_extra_params, "-boot start_sasl -s myapp"}.
%
%%% == Cleanup ==
%
%%% Which files to cleanup
%{clean_files, ["file", "file2"]}.
%
%%% == Reltool ==
%
%%% Target directory for the release
{target, "erlgeom-0.1.0"}.
%
%%% == OTP Applications ==
%
%%% Binaries to link into the erlang path?
%{app_bin, []}.
%
%%% Enable validation of the OTP app module list. Default is 'true'
%{validate_app_modules, true}.
%
%%% == Dependencies ==
%
%%% Where to put any downloaded dependencies. Default is "deps"
{deps_dir, "deps"}.
%
%%% What dependencies we have, dependencies can be of 3 forms, an application
%%% name as an atom, eg. mochiweb, a name and a version (from the .app file), or
%%% an application name, a version and the SCM details on how to fetch it (SCM
%%% type, location and revision). Rebar currently supports git, hg, bzr and svn.
%{deps, [application_name,
%        {application_name, "1.0.*"},
%        {application_name, "1.0.*",
%         {git, "git://github.com/basho/rebar.git", {branch, "master"}}}]}.
%
%%% == Subdirectories ==
%
%%% Subdirectories?
%{sub_dirs, ["dir1", "dir2"]}.
%
%%% == Plugins ==
%
%%% Plugins you wish to include.
%%% These can include any module on the code path, including deps.
%%% Alternatively, plugins can be placed as source files in the plugin_dir, in
%%% which case they will be compiled and loaded dynamically at runtime.
%{plugins, [plugin1, plugin2]}.
%
%%% Override the directory in which plugin sources can be found.
%%% Defaults to ./plugins
%{plugin_dir, "some_other_directory"}.
%
%
%%% == Pre/Post Command Hooks ==
%
%{pre_hooks, [{clean, "./prepare_package_files.sh"},
%             {"linux", compile, "c_src/build_linux.sh"},
%             {compile, "escript generate_headers"},
%             {compile, "escript check_headers"}]}.
%
%{post_hooks, [{clean, "touch file1.out"},
%              {"freebsd", compile, "c_src/freebsd_tweaks.sh"},
%              {eunit, "touch file2.out"},
%              {compile, "touch postcompile.out"}]}.
%
%%% == xref ==
%
%{xref_warnings, false}.
%
%%% xref checks to run
%{xref_checks, [exports_not_used, undefined_function_calls]}.
%
%%% Optional custom xref queries (xref manual has details) specified as
%%%     {xref_queries, [{query_string(), expected_query_result()},...]}
%%% The following for example removes all references to ejabberd:*_msg/4
%%% functions from undefined external function calls as those are in a
%%% generated module
%{xref_queries,
% [{"(XC - UC) || (XU - X - B"
%   " - (\"ejabberd_logger\":\".*_msg\"/\"4\"))",[]}]}.
